
// This is an autogenerated file from Firebase Studio.
'use server';

/**
 * @fileOverview AI-powered candidate shortlisting tool that analyzes GitHub profiles to
 * identify and shortlist promising candidates.
 *
 * - candidateShortlisting - A function that handles the candidate shortlisting process.
 * - CandidateShortlistingInput - The input type for the candidateShortlisting function.
 * - CandidateShortlistingOutput - The return type for the candidateShortlisting function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';
import { fetchWebpageContentTool } from '@/ai/tools/fetch-webpage-tool';

const CandidateShortlistingInputSchema = z.object({
  githubProfileUrl: z
    .string()
    .describe('The URL of the candidate\'s GitHub profile.'),
});
export type CandidateShortlistingInput = z.infer<typeof CandidateShortlistingInputSchema>;

const CandidateShortlistingOutputSchema = z.object({
  summary: z
    .string()
    .describe(
      'A summary of the candidate, including trending repositories, and repeated patterns of commits, based on information found at the GitHub profile URL. If fetching fails or content is unusable, this will contain an error or explanation.'
    ),
  techStack: z
    .array(z.string())
    .describe('The tech stack of the candidate, inferred from their repositories visible at the GitHub profile URL. Empty if fetching fails or content is unusable.'),
  flaggedItems: z
    .array(z.string())
    .describe('A list of items to flag to the recruiter to help screen the candidate, based on the content of the GitHub profile. These should be in complete sentences. If fetching fails or content is unusable, one item will describe the issue.'),
});
export type CandidateShortlistingOutput = z.infer<typeof CandidateShortlistingOutputSchema>;

export async function candidateShortlisting(input: CandidateShortlistingInput): Promise<CandidateShortlistingOutput> {
  console.log('[candidateShortlistingFlow] Received input:', JSON.stringify(input));
  const result = await candidateShortlistingFlow(input);
  console.log('[candidateShortlistingFlow] Sending output:', JSON.stringify(result));
  return result;
}

const prompt = ai.definePrompt({
  name: 'candidateShortlistingPrompt',
  input: {schema: CandidateShortlistingInputSchema},
  output: {schema: CandidateShortlistingOutputSchema},
  tools: [fetchWebpageContentTool],
  prompt: `You are an AI-powered recruiting assistant.
Your primary task is to analyze the content of a candidate's GitHub profile to help a recruiter screen them.
First, use the 'fetchWebpageContent' tool to get the HTML content of the candidate's GitHub profile using the 'githubProfileUrl' provided in the input.

GitHub Profile URL to fetch: {{{githubProfileUrl}}}

If the 'fetchWebpageContent' tool returns a string starting with "TOOL_ERROR:":
- Your 'summary' should state: "Failed to process GitHub profile. Tool error: [The exact error message returned by the tool, including the 'TOOL_ERROR:' prefix and any details that follow. For example, 'TOOL_ERROR: Fetched content too short (length: 1234 characters, minimum expected: 15000)...' or 'TOOL_ERROR: Detected login page content...' or 'TOOL_ERROR: HTTP error fetching...']".
- Your 'techStack' should be an empty array.
- One 'flaggedItem' should be: "Profile processing failed. Tool error: [The exact error message returned by the tool, including the 'TOOL_ERROR:' prefix and any details that follow]".
Do not attempt to analyze further if the tool reported any TOOL_ERROR.

Otherwise (if the tool provided content without reporting a TOOL_ERROR, meaning the content was of sufficient length and did not trigger keyword-based tool errors):
Carefully examine the fetched HTML content.
- First, determine if the content *semantically appears to be a valid, populated public GitHub profile page*. Look for key indicators like a list of repositories (e.g., elements with class names like 'repo-list' or itemprop="owns"), a user bio section (e.g., class 'user-profile-bio'), contribution activity sections (e.g., 'js-yearly-contributions'), or identifiable GitHub UI elements related to user content.
- If the content, despite its length and passing initial tool checks, does NOT appear to be a valid or informative public profile (e.g., it's missing a clear repository list, a user bio, contribution data, seems to be a generic error/redirect page, or is otherwise too sparse for meaningful analysis even if long):
    - Your 'summary' should state: "I am unable to provide a summary of the candidate's GitHub profile from {{{githubProfileUrl}}}. Although the fetched content passed initial checks (e.g. for length and obvious errors), it does not appear to be a semantically valid or informative public GitHub profile page. For example, it might be missing a clear repository list, a user bio, or includes non-profile content. Please verify the URL and ensure the profile is public and populated. Actual content snippet indicative of the issue (first 100 chars): [the first 100 characters of the problematic content, cleaned of newlines for readability]".
    - Your 'techStack' should be an empty array.
    - One 'flaggedItem' should be: "Fetched content from {{{githubProfileUrl}}} (length: [actual length of fetched content if available, otherwise 'unknown']) appears unusable for detailed analysis despite passing initial tool checks. It might be missing essential profile sections (like repositories or bio). Please verify the URL points to a public, populated GitHub user profile."
    Do not attempt to generate a detailed summary or tech stack if the content is deemed semantically unusable.

- If and ONLY IF the content *does* appear to be a valid, informative public GitHub profile page (i.e., it's long enough, not a tool error, and contains recognizable GitHub profile elements):
    - 'summary': A concise summary of the candidate based *only* on the fetched GitHub profile content. Focus on their bio (if present), key projects mentioned in READMEs or pinned items, contribution patterns, or anything else that gives a good overview.
    - 'techStack': A list of technologies (programming languages, frameworks, libraries, tools) explicitly mentioned or clearly inferable from project descriptions, repository names, or profile text in the fetched content. If no specific skills can be confidently identified, this should be an empty array.
    - 'flaggedItems': A list of 2-3 particularly interesting or noteworthy items (positive or areas of potential concern if apparent) that a recruiter should pay attention to. These should be based on the fetched content and phrased as complete sentences. If nothing specific stands out in good content, state that.

Format your output as a JSON object matching the defined schema.
  `,
});

const candidateShortlistingFlow = ai.defineFlow(
  {
    name: 'candidateShortlistingFlow',
    inputSchema: CandidateShortlistingInputSchema,
    outputSchema: CandidateShortlistingOutputSchema,
  },
  async input => {
    console.log('[candidateShortlistingFlow] Input to prompt:', JSON.stringify(input));
    const {output} = await prompt(input);
    console.log('[candidateShortlistingFlow] Output from prompt:', JSON.stringify(output));
    return output!;
  }
);

