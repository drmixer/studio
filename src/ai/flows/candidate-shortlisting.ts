
// This is an autogenerated file from Firebase Studio.
'use server';

/**
 * @fileOverview AI-powered candidate shortlisting tool that analyzes GitHub profiles to
 * identify and shortlist promising candidates.
 *
 * - candidateShortlisting - A function that handles the candidate shortlisting process.
 * - CandidateShortlistingInput - The input type for the candidateShortlisting function.
 * - CandidateShortlistingOutput - The return type for the candidateShortlisting function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';
import { fetchWebpageContentTool } from '@/ai/tools/fetch-webpage-tool';

const CandidateShortlistingInputSchema = z.object({
  githubProfileUrl: z
    .string()
    .describe('The URL of the candidate\'s GitHub profile.'),
});
export type CandidateShortlistingInput = z.infer<typeof CandidateShortlistingInputSchema>;

const CandidateShortlistingOutputSchema = z.object({
  summary: z
    .string()
    .describe(
      'A summary of the candidate, including trending repositories, and repeated patterns of commits, based on information found at the GitHub profile URL. If fetching fails or content is unusable, this will contain an error or explanation.'
    ),
  techStack: z
    .array(z.string())
    .describe('The tech stack of the candidate, inferred from their repositories visible at the GitHub profile URL. Empty if fetching fails or content is unusable.'),
  flaggedItems: z
    .array(z.string())
    .describe('A list of items to flag to the recruiter to help screen the candidate, based on the content of the GitHub profile. These should be in complete sentences. If fetching fails or content is unusable, one item will describe the issue.'),
});
export type CandidateShortlistingOutput = z.infer<typeof CandidateShortlistingOutputSchema>;

export async function candidateShortlisting(input: CandidateShortlistingInput): Promise<CandidateShortlistingOutput> {
  console.log('[candidateShortlistingFlow] Received input:', JSON.stringify(input));
  const result = await candidateShortlistingFlow(input);
  console.log('[candidateShortlistingFlow] Sending output:', JSON.stringify(result));
  return result;
}

const prompt = ai.definePrompt({
  name: 'candidateShortlistingPrompt',
  input: {schema: CandidateShortlistingInputSchema},
  output: {schema: CandidateShortlistingOutputSchema},
  tools: [fetchWebpageContentTool],
  prompt: `You are an AI-powered recruiting assistant.
Your primary task is to analyze the content of a candidate's GitHub profile to help a recruiter screen them.
First, use the 'fetchWebpageContent' tool to get the HTML content of the candidate's GitHub profile using the 'githubProfileUrl' provided in the input.

GitHub Profile URL to fetch: {{{githubProfileUrl}}}

If the 'fetchWebpageContent' tool returns a string starting with "TOOL_ERROR:":
- Your 'summary' should state: "Failed to process GitHub profile. Tool error: [The exact error message returned by the tool, including the 'TOOL_ERROR:' prefix and any details that follow. For example, 'TOOL_ERROR: Fetched content too short (length: 1234 characters, minimum expected: 2500)...' or 'TOOL_ERROR: Detected login page content...' or 'TOOL_ERROR: HTTP error fetching...']".
- Your 'techStack' should be an empty array.
- One 'flaggedItem' should be: "Profile processing failed. Tool error: [The exact error message returned by the tool, including the 'TOOL_ERROR:' prefix and any details that follow]".
Do not attempt to analyze further if the tool reported any TOOL_ERROR.

Otherwise (if the tool provided content without reporting a TOOL_ERROR):
Analyze the fetched HTML content thoroughly. Based *only* on the information present in the successfully fetched HTML content, provide the following:
- summary: A concise summary of the candidate. Focus on their bio (if present), key projects mentioned, contribution patterns, or anything else that gives a good overview from the fetched content. If the content appears to be a valid HTML page but lacks specific GitHub profile elements (e.g., no repository list found, no user bio text), state that the content was fetched but seems incomplete or not a standard profile structure.
- techStack: A list of technologies (programming languages, frameworks, libraries, tools) explicitly mentioned or clearly inferable from project descriptions, repository names, or profile text in the fetched content. If no specific skills can be confidently identified from the content, this should be an empty array.
- flaggedItems: A list of 2-3 particularly interesting or noteworthy items (positive or areas of potential concern if apparent) that a recruiter should pay attention to. These should be based on the fetched content and phrased as complete sentences. If the content quality is low despite the tool not erroring (e.g., missing key sections), one flagged item should reflect this, like "The fetched content, while not a tool error, appears to lack typical GitHub profile sections. Analysis might be limited." If nothing specific stands out in good content, state that.

Format your output as a JSON object matching the defined schema.
  `,
});

const candidateShortlistingFlow = ai.defineFlow(
  {
    name: 'candidateShortlistingFlow',
    inputSchema: CandidateShortlistingInputSchema,
    outputSchema: CandidateShortlistingOutputSchema,
  },
  async input => {
    console.log('[candidateShortlistingFlow] Input to prompt:', JSON.stringify(input));
    const {output} = await prompt(input);
    console.log('[candidateShortlistingFlow] Output from prompt:', JSON.stringify(output));
    return output!;
  }
);
